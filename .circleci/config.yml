version: 2.1
defaults: &defaults
  docker:
  - image: quay.io/pantheon-public/build-tools-ci:4.x
  working_directory: ~/sitedir
  environment:
    TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    ADMIN_USERNAME: admin
    BUILD_TOOLS_VERSION: dev-option-for-no-force
    TERM: dumb


workflows:
  version: 2
  build_push_test:
    jobs:
      # Eventually this job should come from a CircleCI maintained orb.
      - playground/npmbuild_and_persist:
          package_lock_location: "web/wp-content/themes/stevector-sage"
          path_to_persist: "web/wp-content/themes/stevector-sage/dist"
          build_command: "npm run build:production"
      - pantheon/push:
          pre-steps:
            - checkout
            - playground/composer_install_no_dev
            - run: cd web/wp-content/themes/stevector-sage/ && composer install --no-dev --optimize-autoloader --ignore-platform-reqs
            - attach_workspace:
                at: .
          post-steps:
            - run: cd "/tmp/pantheon_repo_for_$TERMINUS_SITE" && git status
          requires:
            - playground/npmbuild_and_persist
      - playground/backstop:
          requires:
            - pantheon/push
      - playground/merge:
          requires:
             - playground/backstop
orbs:
  playground: fauxalgore/playground@dev:12
  pantheon: stevector/pantheon@dev:stevector
  # pantheon_inline:
  #   jobs:
  #     push:
  #       <<: *defaults
  #       steps:
  #
  #       - checkout
  #       - run: echo "TODO check that the orb job has all required variables."
  #       - run: /build-tools-ci/scripts/set-environment
  #       - run: terminus -n auth:login --machine-token="$TERMINUS_TOKEN"
  #
  #       - restore_cache:
  #           keys:
  #             - pantheon-repo-{{ .Branch }}
  #             - pantheon-repo-
  #       - run:
  #           name: pantheon checkout
  #           command: |
  #             export PANTHEON_REPO_DIR="/tmp/pantheon_repo_for_$TERMINUS_SITE"
  #             if [ ! -d "$PANTHEON_REPO_DIR/.git" ]; then
  #               mkdir $PANTHEON_REPO_DIR
  #               git -C $PANTHEON_REPO_DIR init
  #               git -C $PANTHEON_REPO_DIR remote add pantheon $(terminus connection:info $TERMINUS_SITE.dev --field=git_url)
  #               git -C $PANTHEON_REPO_DIR remote -v
  #             fi
  #
  #             git -C $PANTHEON_REPO_DIR fetch pantheon
  #             REMOTE_REF=$(git -C $PANTHEON_REPO_DIR ls-remote pantheon | grep "refs/heads/$TERMINUS_ENV$") || echo "hmm, assigning an empty var returns an error."
  #
  #             if [ -n "$REMOTE_REF" ]; then
  #               git -C $PANTHEON_REPO_DIR checkout $TERMINUS_ENV
  #               git -C $PANTHEON_REPO_DIR pull
  #             else
  #               git -C $PANTHEON_REPO_DIR checkout master
  #               git -C $PANTHEON_REPO_DIR pull
  #               git -C $PANTHEON_REPO_DIR checkout -b $TERMINUS_ENV
  #             fi
  #
  #     - save_cache:
  #         key: pantheon-repo-{{ .Branch }}
  #         paths:
  #         - /tmp/pantheon_repo_for_$TERMINUS_SITE
  #
  #     - run:
  #           name: Delete old Multidevs and other prepare steps
  #           command: terminus -n build:env:delete:ci "$TERMINUS_SITE" --keep=2 --yes
  #
  #     - run:
  #           name: rsync
  #           command: |
  #             export PANTHEON_REPO_DIR="/tmp/pantheon_repo_for_$TERMINUS_SITE"
  #             rsync -av --exclude='.git'  . $PANTHEON_REPO_DIR  --delete
  #             git -C $PANTHEON_REPO_DIR status
  #
  #     - run:
  #           name: deploy
  #           command: |
  #
  #             export PANTHEON_REPO_DIR="/tmp/pantheon_repo_for_$TERMINUS_SITE"
  #             # Create a new multidev site to test on
  #             terminus -n env:wake "$TERMINUS_SITE.dev"
  #             cd $PANTHEON_REPO_DIR
  #             terminus -n build:env:create "$TERMINUS_SITE.dev" "$TERMINUS_ENV" --yes --clone-content
  #     - run: cp $BASH_ENV bash_env.txt
  #     - persist_to_workspace:
  #           root: .
  #           paths:
  #            - bash_env.txt
